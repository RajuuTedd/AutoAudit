// server/graph/neo4j.js
// Lightweight Neo4j client for AutoAudit (Aura or local). CommonJS module.

let dotenvLoaded = false;
try {
  const path = require('path');
  const envPath = path.join(__dirname, '..', '.env'); // server/.env
  require('dotenv').config({ path: envPath });
  dotenvLoaded = true;
} catch (_) { /* optional */ }

const fs = require('fs');
const path = require('path');
const neo4j = require('neo4j-driver');

const NEO4J_URI = process.env.NEO4J_URI;
const NEO4J_USERNAME = process.env.NEO4J_USERNAME;
const NEO4J_PASSWORD = process.env.NEO4J_PASSWORD;

function assertEnv() {
  const missing = [];
  if (!NEO4J_URI) missing.push('NEO4J_URI');
  if (!NEO4J_USERNAME) missing.push('NEO4J_USERNAME');
  if (!NEO4J_PASSWORD) missing.push('NEO4J_PASSWORD');
  if (missing.length) {
    const prefix = dotenvLoaded ? '' : '\n(Hint: install and configure dotenv or set real env vars)\n';
    throw new Error(`Missing required env vars for Neo4j: ${missing.join(', ')}${prefix}`);
  }
}

assertEnv();

// Create a single shared driver for the app lifecycle
const driver = neo4j.driver(
  NEO4J_URI,
  neo4j.auth.basic(NEO4J_USERNAME, NEO4J_PASSWORD),
  // Aura requires encrypted connection; fall back for local bolt if needed
  NEO4J_URI.startsWith('neo4j+s://') || NEO4J_URI.startsWith('bolt+s://')
    ? { /* encrypted by default */ }
    : { /* local dev */ }
);

/**
 * Run a single Cypher statement with a new session.
 * @param {string} cypher
 * @param {object} [params]
 * @returns {Promise<import('neo4j-driver').Result>}
 */
async function run(cypher, params = {}) {
  const session = driver.session();
  try {
    return await session.run(cypher, params);
  } finally {
    await session.close();
  }
}

/**
 * Run multiple statements in a managed write transaction.
 * @param {(tx: import('neo4j-driver').ManagedTransaction) => Promise<any>} work
 */
async function runTx(work) {
  const session = driver.session();
  try {
    return await session.executeWrite(work);
  } finally {
    await session.close();
  }
}

/**
 * Execute a .cypher file from disk (UTF-8) as a single statement.
 * Useful for constraints or mapping rules.
 * @param {string} filePath - absolute or relative to project root
 * @param {object} [params]
 */
async function runFile(filePath, params = {}) {
  const abs = path.isAbsolute(filePath) ? filePath : path.join(process.cwd(), filePath);
  const cypher = fs.readFileSync(abs, 'utf8');
  return run(cypher, params);
}

/**
 * Execute a .cypher file containing multiple statements separated by semicolons.
 * Runs all statements in a single write transaction.
 * @param {string} filePath - absolute or relative to project root
 * @param {object} [params]
 */
async function runFileMany(filePath, params = {}) {
  const abs = path.isAbsolute(filePath) ? filePath : path.join(process.cwd(), filePath);
  const content = fs.readFileSync(abs, 'utf8');
  const statements = content
    .split(';')
    .map(s => s.trim())
    .filter(s => s.length > 0);
  return runTx(async tx => {
    for (const statement of statements) {
      await tx.run(statement, params);
    }
  });
}

/** Close the driver (call on server shutdown) */
async function close() { await driver.close(); }

module.exports = { driver, run, runTx, runFile, runFileMany, close };